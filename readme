// FOR BINARY HEAP IMPLEMENTATION (INCLUDING BINARY HEAP SOLUTIONS OF ASSIGNMENT-1, TAKING QUESTION-5 AS THE MAIN PROBLEM.) 
 
/*************************************************************************  *  *  Pace University  *  Spring 2019  *  Advanced Algorithms  *  *  Course: CS 701-801  *  Name: ISHAN ANAND  *  Collaborators: NONE  *  References: https://mitpress.mit.edu/books/introduction-algorithms-thirdedition 
 
 *  Assignment: 1  *  Problem: (QUESTION – 5 OF ASSIGNMENT)Write a generic class BinaryHeap<T> with methods Extractmax(), Insert(value, priority) and IncreaseKey(value, priority) and a constructor to create the data structure and populate it with a parametric collection of n items.  *  Description: Implementation of Priority Queue in a generic class of Max Binary Heap where n elements are being inserted in randomized order and m operations are being performed at random that include extractMax(), insert(value, priority) and increaseKey(value, priority), where m ≥ n.   *  *  Input: n elements having a specific value and a unique priority in random order.  *  Output: a sorted Binary Heap with a loop that extracts values that have maximum priorities and displaying build times and run times respectively.  *  *  Visible data fields:  public class MaxHeap<T extends Comparable> {  SimpleEntry<T, T>[] A;  int size;  int maxsize;  T max;  T min; 
 
 public MaxHeap(int maxsize, T max, T min) {   this.maxsize = maxsize + 1;   this.size = 0;   A = (SimpleEntry<T, T>[]) Array.newInstance(SimpleEntry.class, this.maxsize);   A[0] = new SimpleEntry<T, T>(max, max);   this.max = max;   this.min = min;  } 
 
 private int parent(int i) {   return i / 2;  } 
 
 private int left(int i) {   return (2 * i);  } 
 
 private int right(int j) { 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #2 
 
  return (2 * j) + 1;  } 
 
 protected void swap(int i, int j) {   SimpleEntry<T, T> tmp;   tmp = A[i];   A[i] = A[j];   A[j] = tmp;  } 
 
 *  Visible methods:  protected void maxHeapify(int i) {   int l = left(i);   int r = right(i);   int largest = i;   if (l <= size && compareTo(A[l], A[i]) > 0) {    largest = l;   } else {    largest = i;   }   if (r <= size && compareTo(A[r], A[largest]) > 0) {    largest = r;   } 
 
  if (largest != i) {    swap(i, largest);    maxHeapify(largest);   }  } 
 
 /**   * Compare 2 elements of heap   *    * @param entry1   * @param entry2   * @return   */  private int compareTo(SimpleEntry<T, T> entry1, SimpleEntry<T, T> entry2) {   if (entry1.getValue().equals(entry2.getValue())) {    return entry1.getKey().compareTo(entry2.getKey());   }   return entry1.getValue().compareTo(entry2.getValue());  } 
 
 public void insert(T key, T priority) {   size = size + 1;   A[size] = new SimpleEntry<T, T>(this.min, this.min);   SimpleEntry<T, T> newVal = new SimpleEntry<T, T>(key, priority);   increaseKey(size, newVal);  } 
 
 private void increaseKey(int i, SimpleEntry<T, T> key) {   if (compareTo(key, A[i]) < 0) { 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #3 
 
   System.err.println("New key is smaller than current key");    return;   }   A[i] = key;   while (i > 1 && compareTo(A[parent(i)], A[i]) < 0) {    swap(i, parent(i));    i = parent(i);   }  } 
 
 /**   * Get and remove max element   *    * @return   */  public SimpleEntry<T, T> extractMax() {   if (size < 1) {    System.err.println("Heap underflow");    return null;   }   SimpleEntry<T, T> max = A[1];   A[1] = A[size];   size -= 1;   maxHeapify(1);   return max;  } 
 
 *  *  *   Remarks  *   -------  * 1.1. SOLUTION TO QUESTION - 1 OF ASSIGNMENT: (5 points) Make a conjecture for the asymptotic running time of adding n entries into an initially empty Priority Queue. 
In order to find the asymptotic running time of the following empty priority queue, let us examine what are the steps before calculating the running time – 1. Take an array including random priority keys. 2. Build an empty Binary heap Priority Queue where elements in the priority queue are null. 
 
Now, make the priority queue - Once these are done, steps to calculate the running time can be done – 3. Fill the priority Queue with random keys of unordered array. 
 
4. Set priority keys in order (Maximum/ Minimum priority) known as min/max heap property (Heapify). 
 
Hence, in order to find the asymptotic running time of the implementation, it is important to keep in mind that – 
In worst case, O(n) calls will be made by min/max heap heapify which can take upto log(n) time. 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #4 
 
Hence, the running time of the following implementation is O(n log n). 
 
1.2.  SOLUTION TO QUESTION -2 OF ASSIGNMENT:  Solution to Answer-2 of Assignment: (5 points) Make a conjecture for the amortized asymptotic running time of performing m operations chosen at random among ExtractMax(), Insert(value, priority), and IncreaseKey(value, priority), in the Priority Queue of the previous question. 
ASSUMPTION – Let ‘x’ be the heap with ‘y’ elements in which we have to perform all the functions 
Extractmax() 
Lets try to solve this using 2 cases- 1. CASE 1 – When the heap ‘x’ has only one element. (‘y’ =1)   2. CASE 2 – When the heap ‘x’ has more than one element. (‘y’ > 1), then when the element with maximum priority is bein taken out, then the structure of the priority queue will dis-orient structure in reference to property of Binary heap. If this is the case, then the amortized cost by potential method is – Cost = cy + Φ(Dy)− Φ(Dy−1) 
= O(n log n)  
Insert (value, priority) 
Lets try to solve this using 2 cases- 1. CASE 1 – When the heap ‘x’ has no element. (‘y’ =0) 2. CASE 2 – When the heap ‘x’ has more than one element. (‘y’ > 1) If this is the case, then the amortized cost by potential method is log n for one element. 
Hence, the amortized cost for one Insert (value, priority) will be O(log n). Therefore, for n elements it will be O(n log n). 
 
Increasekey (value, priority) 
In the worst case, the amortized cost of the IncreaseKey() would be O(log n) because when we will Increase a key then left subtree will be going to be a tree, Right sub-tree will be Max-Heap but the root might not follow Max-Heap function. For which we may need to call Max-heapify function that can give the cost O(m Log n). 
 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #5 
 
 * 1.3  SOLUTION TO QUESTION -6 OF ASSIGNMENT: (10 points) Write a program that does the following.  • Create an instance of your BinaryHeap class with n entries with diﬀerent priorities. Make sure the entries are inserted in random order of priorities. • Perform the same sequence of m operations (chosen at random among ExtractMax(), Insert(value,priority), and IncreaseKey(value,priority)) in each of the data structures created.)  • For each of those four cases, measure the running times and ﬁll the table below (adjust the values of n as needed according to your platform to obtain at least 4 measurements). •  public static void main(String[] arg) {   long startTime = System.nanoTime();   MaxHeap<Integer> maxHeap = new MaxHeap<Integer>(100000, Integer.MAX_VALUE, Integer.MIN_VALUE);   List<Integer> values = new ArrayList<>();   List<Integer> priorites = new ArrayList<>();   int n = 100000;   for (int i = 0; i < n; i++) {    values.add(i);    priorites.add(i);   }   Collections.shuffle(values);   Collections.shuffle(priorites);   long buildTime = System.nanoTime() - startTime;   startTime = System.nanoTime();   for (int i = 0; i < n; i++) {    int value = values.get(i);    int priority = priorites.get(i);    maxHeap.insert(value, priority);    System.out.println(String.format("INSERT: value(%d), priority(%d)", value, priority));   } 
 
  for (int i = 1; i < n; i++) {    SimpleEntry<Integer, Integer> max = maxHeap.extractMax();    System.out.println(String.format("EXTRACT MAX VALUE(%d), PRIORITY(%d)", max.getKey(), max.getValue()));   }   System.out.println(String.format("BUILD TIME: %d ns", buildTime));   System.out.println(String.format("RUNNING TIME: %d ns", System.nanoTime() - startTime)); 
 
 } 
 
 
Construction time 
N = 100 N = 1000 N = 10000 N = 100000 N = 1000000 
Binary Heap 1854955 ns 5051320 ns 6344334 ns 27507654 ns 98747357 ns 
 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #6 
 
M operations 
N = 100 N = 1000 N = 10000 N = 100000 N = 1000000 
Binary Heap 13460518 ns 49690702 ns 122961743 ns 
686072093 ns 
5131356037 ns 
 
 
1.7  SOLUTION TO QUESTION - 7 OF ASSIGNMENT: (20 points) How does these measurements compare with your conjectures? You are NOT being asked which one is faster. If the results differ from your conjecture, investigate the reason by looking carefully at the code and explain what may have happened. 
 
 
 
The given graph depicts the build and running case analysis of Binary Heap for n insertions and m operations. The times is calculated in nanoseconds and the instance has values of n=100 to n=1000000 where m operations are being performed and m >= n.  
 
 
From the graph, the construction time(or Build Time) for n = 1000000 comes up to be a function of n in which the dedicated structure to Binary tree is build and the function is displaying construction of an array into the Binary tree structure, whereas the running time comes out to be a function of O(m log n)that involves all other functions that include Insert(value, priority), extractMax(), Increasekey(value, priority) at random.    
 
Hence, the insert function takes O(n log n), extractmax() takes O(n log n) and increaseKey(value, priority)takes O(m log n) running times. Therefore, all the conjectures proposed for the respective algorithm turns out to be true. *  *************************************************************************/ // FOR vEB TREE IMPLEMENTATION (INCLUDING Veb TREE SOLUTIONS OF ASSIGNMENT-1, TAKING QUESTION-5 AS THE MAIN PROBLEM.) 
0
1E+09
2E+09
3E+09
4E+09
5E+09
6E+09
7E+09
8E+09
n=100 n=1000 n=10000 n=100000 n=1000000
Build Time and Running Time Analysis of Binary Heap for 'm' operations where m > n
Build Time Runtime
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #7 
 
 
/*************************************************************************  *  *  Pace University  *  Spring 2019  *  Advanced Algorithms  *  *  Course: CS 701-801  *  Name: ISHAN ANAND  *  Collaborators: NONE  *  References:  https://mitpress.mit.edu/books/introduction-algorithmsthird-edition 
 
 *  *  Assignment: 1  *  Problem: (QUESTION – 5 OF ASSIGNMENT)Write a generic class vEBtree<T> with methods Extractmax(), Insert(value, priority) and IncreaseKey(value, priority) and a constructor to create the data structure and populate it with a parametric collection of n items. 
 
 *  Description: Implementation of Priority Queue in a generic class of Veb tree where n elements are being inserted in randomized order and m operations are being performed at random that include extractMax(), insert(value, priority) and increaseKey(value, priority) where m ≥ n. 
 
 *  *  Input: Input: n elements having a specific value and a unique priority in random order with memory size u, where u is the power of 2.  *  Output: a Sorted vEB tree after execution of m operations that implements m operations on n elements inserted at randomized order.  *  *  Visible data fields:  *  import java.util.AbstractMap.SimpleEntry; import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.List; import java.util.Random; 
 
public class vEBtree<T extends Comparable<T>> { 
 
 class Node {   public int u;   public SimpleEntry<T, T> min;   public SimpleEntry<T, T> max;   public Node summary;   public Node[] cluster; 
 
  public Node(int u) {    this.u = u;    min = NIL;    max = NIL; 
 
   initialize(u);   } 
 
  private void initialize(int u) { 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #8 
 
   if (u <= 2) {     summary = null;     cluster = null;    } else {     int size = higherSquareRoot(); 
 
    summary = new Node(size);     cluster = new vEBtree.Node[size]; 
 
    for (int i = 0; i < size; i++) {      cluster[i] = new Node(size);     }    }   } 
 
  /**    * Higher Square Root    */   private int higherSquareRoot() {    return (int) Math.pow(2, Math.ceil((Math.log10(u) / Math.log10(2)) / 2));   }  } 
 
 // Define NIL value to initialize min, max;  private SimpleEntry<T, T> NIL;  private T ONE;  private T ZERO;  private Node root; 
 
 /*   * Construction method   */  public vEBtree(int u, T NIL, T ONE, T ZERO) throws Exception {   this.NIL = new SimpleEntry<T, T>(NIL, NIL);   this.ONE = ONE;   this.ZERO = ZERO;   if (!isPowerOf2(u)) {    throw new Exception("Tree size must be a power of 2!");   }   root = new Node(u);  } 
 *  *  Visible methods:  *  /*   * Insert x   */  public void insert(T value, T priority) {   insert(root, value, priority);  } 
 
 /*   * Delete x   */  public boolean extractMax(T value, T priority) { 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #9 
 
  return extractMax(root, new SimpleEntry<T, T>(value, priority));  } 
 
 /*   * Returns the maximum value in the tree or -1 if the tree is empty.   */  public SimpleEntry<T, T> extractMax() {   SimpleEntry<T, T> max = root.max;   extractMax(max.getKey(), max.getValue());   return max;  } 
 
 private void insertEmptyNode(Node v, SimpleEntry<T, T> s) {   v.min = s;   v.max = s;  } 
 
 /**   * Insert new value to vEBTree   *    * @param v        Root   * @param priority value to insert   */  private void insert(Node v, T value, T priority) {   SimpleEntry<T, T> x = new SimpleEntry<T, T>(value, priority);   if (v.min == null) {    insertEmptyNode(v, x);    return;   } 
 
  increaseKey(v, x); 
 
 } 
 
 private void increaseKey(Node v, SimpleEntry<T, T> x) {   if (compareTo(x, v.min) < 0) {    // Exchange x with v.min    SimpleEntry<T, T> temp = x;    x = v.min;    v.min = temp;   }   if (v.u > 2) {    if (v.cluster[(int) high(v, x)].min == null) {     insert(v.summary, x.getKey(), high(v, x));     insertEmptyNode(v.cluster[(int) high(v, x)], new SimpleEntry<T, T>(x.getKey(), low(v, x)));    } else {     insert(v.cluster[(int) high(v, x)], x.getKey(), low(v, x));    } 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #10 
 
  } 
 
  if (compareTo(x, v.max) > 0) {    v.max = x;   }  } 
 
 /**   * Compare 2 elements of heap   *    * @param min   * @param max   * @return   */  private int compareTo(SimpleEntry<T, T> min, SimpleEntry<T, T> max) { 
 
  if (min.getValue().equals(max.getValue())) {    return min.getKey().compareTo(max.getKey());   }   return min.getValue().compareTo(max.getValue());  } 
 
 /**   * Compare 2 elements of heap equals or not   *    * @param x   * @param min   * @return   */  private boolean equals(SimpleEntry<T, T> x, SimpleEntry<T, T> min) {   if (x == null || min == null) {    return false;   }   return x.getKey().equals(min.getKey()) && x.getValue().equals(min.getValue());  } 
 
 private boolean extractMax(Node v, SimpleEntry<T, T> x) {   if (compareTo(v.min, v.max) == 0) {    v.min = NIL;    v.max = NIL;    return false;   }   if (v.u == 2) {    v.min = ZERO.equals(x.getValue()) ? new SimpleEntry<T, T>(x.getKey(), ONE)      : new SimpleEntry<T, T>(x.getKey(), ZERO);    v.max = v.min;    return false;   }   if (!equals(x, v.min)) { 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #11 
 
   return false;   } 
 
  SimpleEntry<T, T> first_cluster = v.summary.min;   T priority = index(v, first_cluster, v.cluster[(int) first_cluster.getValue()].min);   v.min = new SimpleEntry<T, T>(x.getValue(), priority); 
 
  extractMax(v.cluster[(int) high(v, x)], new SimpleEntry<T, T>(x.getKey(), low(v, x)));   if (v.cluster[(int) high(v, x)].min == null) {    extractMax(v.summary, new SimpleEntry<T, T>(x.getKey(), high(v, x)));    if (equals(x, v.max)) {     SimpleEntry<T, T> summary_max = v.summary.max;     if (summary_max == null) {      v.max = v.min;     } else {      priority = index(v, summary_max, v.cluster[(int) summary_max.getValue()].max);      v.max = new SimpleEntry<T, T>(x.getValue(), priority);     }    }   } else if (equals(x, v.max)) {    priority = index(v, new SimpleEntry<T, T>(x.getValue(), high(v, x)), v.cluster[(int) high(v, x)].max);    v.max = new SimpleEntry<T, T>(x.getValue(), priority);   }   return true; 
 
 } 
 
 /*   * Returns the integer value of the first half of the bits of x.   */  private T high(Node node, SimpleEntry<T, T> x) {   return (T) new Integer((int) Math.floor((int) x.getValue() / lowerSquareRoot(node)));  } 
 
 /**   * The integer value of the second half of the bits of x.   */  private T low(Node node, SimpleEntry<T, T> x) {   return (T) new Integer((int) x.getValue() % (int) lowerSquareRoot(node));  } 
 
 /** 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #12 
 
  * The value of the least significant bits of x.   */  private double lowerSquareRoot(Node node) {   return Math.pow(2, Math.floor((Math.log10(node.u) / Math.log10(2)) / 2.0));  } 
 
 /**   * The index in the tree of the given value.   */  private T index(Node node, SimpleEntry<T, T> first_cluster, SimpleEntry<T, T> min) {   return (T) new Integer((int) ((int) first_cluster.getValue() * lowerSquareRoot(node) + (int) min.getValue()));  } 
 
 /**   * Returns true if x is a power of 2, false otherwise.   */  private static boolean isPowerOf2(int x) {   if (0 == x) {    return false;   } 
 
  while (x % 2 == 0) {    x = x / 2;   } 
 
  if (x > 1) {    return false;   } 
 
  return true;  } 
 
 *  *  *   Remarks  *   -------  * 1.3 SOLUTION TO QUESTION - 3 OF ASSIGNMENT: (5 points) Make a conjecture for the asymptotic running time of adding n entries into an initially empty Priority Queue. 
In order to find the asymptotic running time of the following empty priority queue, let us examine what are the steps before calculating the running time – 1. Take an array including random priority keys. 2. Build an empty vEB Tree Priority Queue where elements in the priority queue are null. 
 
Now, make the priority queue - Once these are done, steps to calculate the running time can be done – 3. Fill the priority Queue with random keys of unordered array. 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #13 
 
 
4. Set priority keys in order (Maximum/ Minimum priority) known as min/max. 
 
Hence, in order to find the asymptotic running time of the implementation, it is important to keep in mind that – 
In worst case, O(n) calls will be made by min/max heap heapify which can take upto log(n) time. But unlike Binary heap, a recursive call can be made with universe size that takes O(1) time. 
Hence, the running time of the following implementation is O(m log log u). 
 
 
1.4 SOLUTION TO QUESTION -4 OF ASSIGNMENT:  Solution to Answer-2 of Assignment: (5 points) Make a conjecture for the amortized asymptotic running time of performing m operations chosen at random among ExtractMax(), Insert(value, priority), and IncreaseKey(value, priority), in the Priority Queue of the previous question. 
 
ExtractMax() For m operations, each delete function call makes 2 recursive delete calls and one call is for is-empty. As is-empty will take a running time of O(log log n), the recurrence relation will call and generate the running time of O(log n), by giving proof by master theorem(Chapter – 4,Introduction to Algorithms, 3rd Edition). Hence, the running time would be O(log U). 
 
Insert(value, priority) The insert function on vEB tree will make 2 recursive call on subproblems of size Θ(𝑈/) and will do Θ(1) work. This gives recurrence as a function of m and so, T(2) ≤ Θ(1) T(u) ≤ Θ(1) + 2T(𝑈/) This yields the running time to be O(log U). And for elements, the total running time would be O(n log U). 
 
Increasekey(value, priority) Each element when will be inserted will give the worst case running time of O(log n) when so ever it will call a Increasekey function. This gives a worst case runtime of O(log n). Hence, for m operations, the total running time would be O(m log n). 
 
1.6 SOLUTION TO QUESTION - 6 OF ASSIGNMENT:(10 points) Write a program that does the following.  • Create an instance of your BinaryHeap class with n entries with diﬀerent priorities. Make sure the entries are inserted in random order of priorities. • Perform the same sequence of m operations (chosen at random among ExtractMax(), Insert(value,priority), and 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #14 
 
IncreaseKey(value,priority)) in each of the data structures created.)  • For each of those four cases, measure the running times and ﬁll the table below (adjust the values of n as needed according to your platform to obtain at least 4 measurements). 
 
public static void main(String[] args) throws Exception {   int n = 1000000;   long startTime = System.nanoTime();   vEBtree<Integer> tree = new vEBtree<Integer>((int) Math.pow(2, 20), -1, 1, 0);   List<Integer> values = new ArrayList<>();   List<Integer> priorites = new ArrayList<>();   for (int i = 0; i < n; i++) {    values.add(i);    priorites.add(i);   }   Collections.shuffle(values);   Collections.shuffle(priorites);   long buildTime = System.nanoTime() - startTime;   startTime = System.nanoTime();   for (int i = 1; i < n; i++) {    int value = values.get(i);    int priority = priorites.get(i);    tree.insert(value, priority);    System.out.println(String.format("INSERT: value(%d), priority(%d)", value, priority));   } 
 
  SimpleEntry<Integer, Integer> max = tree.extractMax();   System.out.println(String.format("EXTRACT MAX VALUE(%d), PRIORITY(%d)", max.getKey(), max.getValue()));   System.out.println(String.format("BUILD TIME: %d ns", buildTime));   System.out.println(String.format("RUNNING TIME: %d ns", System.nanoTime() - startTime));  } } 
Construction time 
N = 100 N = 1000 N = 10000 N = 100000 N = 1000000 
vEB Tree 1593384797 ns 
1522203887 ns 
1502978479 ns 
1554419437 ns 
1643439355 ns 
 
M operations 
N = 100 N = 1000 N = 10000 N = 100000 N = 1000000 
vEB Tree 14338530 ns 47894277  ns 
209544873 ns 
1003427611 ns 
10114858727 ns 
 
 
1.7  SOLUTION TO QUESTION - 7 OF ASSIGNMENT: (20 points) How does these measurements compare with your conjectures? You are NOT being asked which one is faster. If the results differ from your conjecture, investigate the reason by looking carefully at the code and explain what may have happened. 
ISHAN ANAND 
CS 701-801 ASSIGNMENT: 1 #15 
 
 
 
The given graph depicts the build and running case analysis of vEB Tree for n insertions and m operations. The times is calculated in nanoseconds and the instance has values of n=100 to n=1000000 where m operations are being performed and m >= n.  
 
From the graph, the construction time(or Build Time) for n = 1000000 comes up to U be a function of log and builds up space pretty much fast in construction of a vEB Tree structure. Whereas, the total running time comes out to be a function of O(n log u) that involves functions like Insert(value, priority), extractMax() and IncreaseKey(value, priority). 
 
Hence, the insert function takes O(n log u), extractmax() takes O(n log u) and increaseKey(value, priority)takes O(m log u) running times. Therefore, all the conjectures proposed for the respective algorithm turns out to be true.    Therefore, all the conjectures proposed for the respective algorithm turns out to be true.   * 
 
 *  *************************************************************************/ 
